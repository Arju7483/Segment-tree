Problem: https://codeforces.com/contest/242/problem/E
Solution:
#include<bits/stdc++.h>
using namespace std;
const int N = 1e5+9;
#define ll long long
const int B = 20;
struct Node{
   int bit[B];
};
Node tree[4*N];
int lazy[4*N] , ar[N];
Node merge(Node left,Node right){
   Node ans;
   for(int i=0;i<B;i++){
      ans.bit[i] = left.bit[i]+right.bit[i];
   }
   return ans;
}
void build(int node,int b,int e){
    lazy[node]=0;
   if(b==e){
      for(int i=0;i<B;i++){
        if((ar[b]>>i)&1)tree[node].bit[i]=1;
        else tree[node].bit[i]=0;
      }
       return;
      }

 int left = 2*node , right = 2*node+1;
 int mid = (b+e)/2;
 build(left,b,mid);
 build(right,mid+1,e);
 tree[node] = merge(tree[left], tree[right]);
}
void push(int node,int b,int e){
   if(lazy[node]==0)return;
   int l = (e-b+1) , x = lazy[node];
   for(int i=0;i<B;i++){
    if((lazy[node]>>i)&1)tree[node].bit[i] = l - tree[node].bit[i];
   }
   if(b!=e){
      lazy[2*node] ^= lazy[node];
      lazy[2*node+1] ^= lazy[node];
   }
   lazy[node] = 0;
}
void update(int node,int b,int e,int l,int r,int value){
   push(node,b,e);
   if(b>r||e<l)return ;
   if(b>=l&&e<=r){
      lazy[node] = (lazy[node]^value);
      push(node,b,e);
      return;
   }
   int left = 2*node , right = 2*node+1;
 int mid = (b+e)/2;
 update(left,b,mid,l,r,value);
 update(right,mid+1,e,l,r,value);
 tree[node] = merge(tree[left] , tree[right]);
}

Node query(int node,int b,int e,int l,int r){
   push(node,b,e);
   if(b>r||e<l){
      Node nod;
      for(int i=0;i<B;i++)nod.bit[i]=0;
      return nod;
   }
   if(b>=l&&e<=r){
      return tree[node];
   }
    int left = 2*node , right = 2*node+1;
    int mid = (b+e)/2;
    Node ans = merge(query(left,b,mid,l,r),query(right,mid+1,e,l,r));
    return ans;

}
void solve(){
    memset(lazy,0,sizeof(lazy));

   int n,q;
   cin >> n;
   for(int i=1;i<=n;i++)cin>>ar[i];
   build(1,1,n);

   cin>>q;

   while(q--){
      int x;cin>>x;
      if(x==2){

         int l,r,v;
         cin>>l>>r>>v;
         update(1,1,n,l,r,v);
      }
      else{
         int l,r;

         cin>>l>>r;
         Node ans =query(1,1,n,l,r);
        ll sum = 0;
         for(int i=0;i<B;i++){
          sum =sum + 1LL*ans.bit[i]*(1<<i);
         }
       cout<<sum<<endl;
      }
   }

}
int main(){
     ios::sync_with_stdio(false);cin.tie(0);

int t=1;
//cin>>t;
int T=1;
while(t--){
  // cout<<"Case "<<T<<":\n";
      solve();
      T++;
}
 return 0;
}

