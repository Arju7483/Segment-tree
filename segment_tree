///sum,min,max,multiplicaion,modular mul,matrix mul,xor,or ,and,gcd can be perform by segment tree.
#include<bits/stdc++.h>
using namespace std;
#define mx 1000
#define N 100001
int sg[N*4];
int ar[N+1] , n;
void build(int node,int b,int e){
    if(b==e){
        sg[node]=ar[b];
        return;
    }
    int mid = (b+e)/2;
    int l = 2*node , r = 2*node+1;
    build(l,b,mid);
    build(r,mid+1,e);
    sg[node]=sg[l]+sg[r]; ///change this
}
int query(int node,int b,int e,int l,int r){
    if(b>r||e<l)return 0;
    if(b>=l&&e<=r)return sg[node];

    int mid = (b+e)/2;
    return query(node*2,b,mid,l,r)+query(node*2+1,mid+1,e,l,r); ///change this
}
void Update(int node,int b,int e,int ind,int value){
    if(ind<b || e<ind)return;
    if(b==ind&&e==ind){
        sg[node]=value;
        return;
    }

    int left = node*2, right = node*2+1;
    int mid = (b+e)/2;
    Update(left,b,mid,ind,value);
    Update(right,mid+1,e,ind,value);
    sg[node]=sg[left]+sg[right]; ///change this
}
int main(){
     int q;
   cin >> n >> q;
   for(int i=1;i<=n;i++)cin>>ar[i];
   build(1,1,n);

   while(q--){
    int x;cin >> x;
    if(x==1){
        int l , r;
        cin >> l >> r;
        cout<<query(1,1,n,l,r)<<endl;
    }
    if(x==2){
        int ind , value;
        cin >> ind >> value;
        Update(1,1,n,ind,value);
    }
   }
}



